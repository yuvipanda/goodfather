<%
def write_field_definition(name,type)
	if type=='Number' then
		return "#{name} = 0"
	elsif type=='String' then
		return "#{name} = u''"
	elsif type=='DateTime'
		return "#{name} = datetime(1970,1,1)"
	else
		return "#{name} = #{type}()"
	end
end

def write_field_to_xml(name,type)
	str = "ElementTree.SubElement(element,'#{name}')"
	if type=='Number' then
		return str + ".text = str(self.#{name})"
	elsif type=='String' then
		return str + ".text = self.#{name}"
	elsif type == 'DateTime'
		return str + ".text = self.#{name}.isoformat()"
	else
		return "element.append(self.#{name}.toxml())"
	end
end

def write_collection_field_to_xml(elementname, name,type)
	if type=='Number' or type=='String' or type=='DateTime' then
		return "ElementTree.SubElement(#{elementname},'item')" + write_field_to_xml('i',type)
	else
		return "#{elementname}.append(i.toxml())"
	end
end
%>

from datetime import datetime
from xml.etree import ElementTree
import sqlite3
import os

class <%= model.name %>:

	def __init__(self,filepath,createnew=True):
		exists = os.path.exists(filepath)
		if createnew==False:
			if exists:
				self.connection=sqlite3.connect(filepath)
			else:
				self.connection=sqlite3.connect(filepath)
				createPostsSQL = r'CREATE TABLE Data (Data)'		
				self.connection.execute(createPostsSQL)
		else:
			if exists:
				os.remove(filepath)
			self.connection=sqlite3.connect(filepath)
			createPostsSQL = r'CREATE TABLE Data (Data)'		
			self.connection.execute(createPostsSQL)

	def persist(self,item):
		self.connection.execute('INSERT INTO Data VALUES (:data)',{'data':ElementTree.tostring(item.toxml())})
		self.connection.commit()
	
	def __del__(self):
		self.connection.close()


<% model.types.each do |type| %>
class <%= type.name %>:
	def __init__(self):
		<% type.fields.each do |field| %>
		self.<%= write_field_definition(field[0],field[1]) %>
		<% end %>

		<% type.collections.each do |collection| %>
		self.<%= collection[0] %> = []
		<% end %>

	def toxml(self):
		element = ElementTree.Element('<%= type.name %>')
		<% type.fields.each do |field| %>
		<%= write_field_to_xml(field[0],field[1]) %>
		<% end %>

		<% type.collections.each do |collection| %>
		<%= collection[0] %>element = ElementTree.Element('<%= collection[0] %>')
		for i in self.<%= collection[0] %>:		
			<%=write_collection_field_to_xml(collection[0]+ 'element',collection[0],collection[1])%>
		element.append(<%=collection[0]%>element)
		<% end %>
		
		return element
<% end %>


